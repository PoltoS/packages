diff -ruN librpc-2015-04-10.orig/create_xid.c librpc-2015-04-10/create_xid.c
--- librpc-2015-04-10.orig/create_xid.c	2007-01-15 00:00:00.000000000 +0300
+++ librpc-2015-04-10/create_xid.c	2015-09-29 13:02:42.307614408 +0300
@@ -24,7 +24,13 @@
 #include <stdlib.h>
 #include <sys/time.h>
 #include <rpc/rpc.h>
-
+#include <sys/types.h>
+#undef __UCLIBC_MUTEX_STATIC
+#undef __UCLIBC_MUTEX_LOCK
+#undef __UCLIBC_MUTEX_UNLOCK
+#define __UCLIBC_MUTEX_STATIC(M,I) static pthread_mutex_t M = I
+#define __UCLIBC_MUTEX_LOCK(M) pthread_mutex_lock(&(M))
+#define __UCLIBC_MUTEX_UNLOCK(M) pthread_mutex_unlock(&(M))
 
 /* The RPC code is not threadsafe, but new code should be threadsafe. */
 
diff -ruN librpc-2015-04-10.orig/getrpcent.c librpc-2015-04-10/getrpcent.c
--- librpc-2015-04-10.orig/getrpcent.c	2007-01-15 00:00:00.000000000 +0300
+++ librpc-2015-04-10/getrpcent.c	2015-09-29 13:01:37.554812254 +0300
@@ -256,6 +256,13 @@
 }
 
 #if defined(__UCLIBC_HAS_REENTRANT_RPC__)
+#include <sys/types.h>
+#undef __UCLIBC_MUTEX_STATIC
+#undef __UCLIBC_MUTEX_LOCK
+#undef __UCLIBC_MUTEX_UNLOCK
+#define __UCLIBC_MUTEX_STATIC(M,I) static pthread_mutex_t M = I
+#define __UCLIBC_MUTEX_LOCK(M) pthread_mutex_lock(&(M))
+#define __UCLIBC_MUTEX_UNLOCK(M) pthread_mutex_unlock(&(M))
 
 __UCLIBC_MUTEX_STATIC(mylock, PTHREAD_MUTEX_INITIALIZER);
 
diff -ruN librpc-2015-04-10.orig/rpc/compat.h librpc-2015-04-10/rpc/compat.h
--- librpc-2015-04-10.orig/rpc/compat.h	2007-01-15 00:00:00.000000000 +0300
+++ librpc-2015-04-10/rpc/compat.h	2015-09-29 12:48:16.784613724 +0300
@@ -14,9 +14,10 @@
 #include <poll.h>
 #include <pthread.h>
 
-#ifdef __UCLIBC__
+#if 0 /* def __UCLIBC__ */
 #include <bits/libc-lock.h>
 #else
+#include <sys/types.h>
 #undef __UCLIBC_MUTEX_STATIC
 #undef __UCLIBC_MUTEX_LOCK
 #undef __UCLIBC_MUTEX_UNLOCK
diff -ruN librpc-2015-04-10.orig/rpc_thread.c librpc-2015-04-10/rpc_thread.c
--- librpc-2015-04-10.orig/rpc_thread.c	2007-01-15 00:00:00.000000000 +0300
+++ librpc-2015-04-10/rpc_thread.c	2015-09-29 13:00:07.017698380 +0300
@@ -12,6 +12,13 @@
 
 
 #ifdef __UCLIBC_HAS_THREADS__
+#include <sys/types.h>
+#undef __UCLIBC_MUTEX_STATIC
+#undef __UCLIBC_MUTEX_LOCK
+#undef __UCLIBC_MUTEX_UNLOCK
+#define __UCLIBC_MUTEX_STATIC(M,I) static pthread_mutex_t M = I
+#define __UCLIBC_MUTEX_LOCK(M) pthread_mutex_lock(&(M))
+#define __UCLIBC_MUTEX_UNLOCK(M) pthread_mutex_unlock(&(M))
 
 /* Variable used in non-threaded applications or for the first thread.  */
 static struct rpc_thread_variables __libc_tsd_RPC_VARS_mem;
