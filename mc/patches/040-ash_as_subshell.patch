diff -ruN mc-4.8.14.orig/lib/global.c mc-4.8.14/lib/global.c
--- mc-4.8.14.orig/lib/global.c	2015-03-20 21:06:04.000000000 +0300
+++ mc-4.8.14/lib/global.c	2015-09-29 14:26:24.753569738 +0300
@@ -97,6 +97,7 @@
 #endif /* !ENABLE_SUBSHELL */
 
         .shell = NULL,
+        .shell_realpath = NULL,
 
         .xterm_flag = FALSE,
         .disable_x11 = FALSE,
diff -ruN mc-4.8.14.orig/lib/global.h mc-4.8.14/lib/global.h
--- mc-4.8.14.orig/lib/global.h	2015-03-20 21:06:04.000000000 +0300
+++ mc-4.8.14/lib/global.h	2015-09-29 14:26:24.753569738 +0300
@@ -251,6 +251,7 @@
 
         /* The user's shell */
         char *shell;
+        char *shell_realpath;
 
         /* This flag is set by xterm detection routine in function main() */
         /* It is used by function view_other_cmd() */
diff -ruN mc-4.8.14.orig/src/main.c mc-4.8.14/src/main.c
--- mc-4.8.14.orig/src/main.c	2015-03-20 21:06:04.000000000 +0300
+++ mc-4.8.14/src/main.c	2015-09-29 14:26:24.753569738 +0300
@@ -85,6 +85,7 @@
 /*** file scope type declarations ****************************************************************/
 
 /*** file scope variables ************************************************************************/
+char rp_shell[PATH_MAX];
 
 /*** file scope functions ************************************************************************/
 /* --------------------------------------------------------------------------------------------- */
@@ -129,6 +130,7 @@
     shell_env = getenv ("SHELL");
     if ((shell_env == NULL) || (shell_env[0] == '\0'))
     {
+        /* 2nd choice: user login shell */
         struct passwd *pwd;
 
         pwd = getpwuid (geteuid ());
@@ -136,13 +138,37 @@
             mc_global.tty.shell = g_strdup (pwd->pw_shell);
     }
     else
+        /* 1st choice: SHELL environment variable */
         mc_global.tty.shell = g_strdup (shell_env);
 
     if ((mc_global.tty.shell == NULL) || (mc_global.tty.shell[0] == '\0'))
     {
         g_free (mc_global.tty.shell);
-        mc_global.tty.shell = g_strdup ("/bin/sh");
+        /* 3rd choice: look for existing shells supported as MC subshells.  */
+        if (access("/bin/bash", X_OK) == 0)
+            mc_global.tty.shell = g_strdup ("/bin/bash");
+        else if (access("/bin/ash", X_OK) == 0)
+            mc_global.tty.shell = g_strdup ("/bin/ash");
+        else if (access("/bin/dash", X_OK) == 0)
+            mc_global.tty.shell = g_strdup ("/bin/dash");
+        else if (access("/bin/busybox", X_OK) == 0)
+            mc_global.tty.shell = g_strdup ("/bin/busybox");
+        else if (access("/bin/zsh", X_OK) == 0)
+            mc_global.tty.shell = g_strdup ("/bin/zsh");
+        else if (access("/bin/tcsh", X_OK) == 0)
+            mc_global.tty.shell = g_strdup ("/bin/tcsh");
+        /* No fish as fallback because it is so much different from other shells and
+         * in a way exotic (even though user-friendly by name) that we should not
+         * present it as a subshell without the user's explicit intention. We rather
+         * will not use a subshell but just a command line.
+         * else if (access("/bin/fish", X_OK) == 0)
+         *     mc_global.tty.shell = g_strdup ("/bin/fish");
+         */
+        else
+            /* Fallback and last resort: system default shell */
+            mc_global.tty.shell = g_strdup ("/bin/sh");
     }
+    mc_global.tty.shell_realpath = mc_realpath (mc_global.tty.shell, rp_shell);
 
     /* This is the directory, where MC was installed, on Unix this is DATADIR */
     /* and can be overriden by the MC_DATADIR environment variable */
diff -ruN mc-4.8.14.orig/src/subshell.c mc-4.8.14/src/subshell.c
--- mc-4.8.14.orig/src/subshell.c	2015-09-29 14:26:06.801333416 +0300
+++ mc-4.8.14/src/subshell.c	2015-09-29 14:39:47.348115288 +0300
@@ -115,6 +115,8 @@
 static enum
 {
     BASH,
+    ASH_BUSYBOX,    /* BusyBox default shell (ash) */
+    DASH,           /* Debian variant of ash */
     TCSH,
     ZSH,
     FISH
@@ -269,8 +271,9 @@
             init_file = g_strdup (".bashrc");
         }
 
-        /* Make MC's special commands not show up in bash's history */
-        putenv ((char *) "HISTCONTROL=ignorespace");
+        /* Make MC's special commands not show up in bash's history and also suppress
+         * consecutive identical commands*/
+        putenv ((char *) "HISTCONTROL=ignoreboth");
 
         /* Allow alternative readline settings for MC */
         {
@@ -286,7 +289,26 @@
 
         break;
 
-        /* TODO: Find a way to pass initfile to TCSH and ZSH */
+    case ASH_BUSYBOX:
+    case DASH:
+        /* Do we have a custom init file ~/.local/share/mc/ashrc? */
+        init_file = mc_config_get_full_path ("ashrc");
+
+        /* Otherwise use ~/.profile */
+        if (access (init_file, R_OK) == -1)
+        {
+            g_free (init_file);
+            init_file = g_strdup (".profile");
+        }
+
+        /* Put init file to ENV variable used by ash */
+        putenv_str = g_strconcat ("ENV=", init_file, NULL);
+        putenv (putenv_str);
+        /* Do not use "g_free (putenv_str)" here, otherwise ENV will be undefined! */
+
+        break;
+
+        /* TODO: Find a way to pass initfile to TCSH, ZSH and FISH */
     case TCSH:
     case ZSH:
     case FISH:
@@ -324,19 +346,17 @@
         execl (mc_global.tty.shell, "bash", "-rcfile", init_file, (char *) NULL);
         break;
 
-    case TCSH:
-        execl (mc_global.tty.shell, "tcsh", (char *) NULL);
-        break;
-
     case ZSH:
         /* Use -g to exclude cmds beginning with space from history
          * and -Z to use the line editor on non-interactive term */
         execl (mc_global.tty.shell, "zsh", "-Z", "-g", (char *) NULL);
-
         break;
 
+    case ASH_BUSYBOX:
+    case DASH:
+    case TCSH:
     case FISH:
-        execl (mc_global.tty.shell, "fish", (char *) NULL);
+        execl (mc_global.tty.shell, mc_global.tty.shell, (char *) NULL);
         break;
     }
 
@@ -779,21 +799,36 @@
     /* Take the current (hopefully pristine) tty mode and make */
     /* a raw mode based on it now, before we do anything else with it */
     init_raw_mode ();
-
     if (mc_global.tty.subshell_pty == 0)
     {                           /* First time through */
-        /* Find out what type of shell we have */
+        /* Find out what type of shell we have. Also consider real paths (resolved symlinks)
+         * because e.g. csh might point to tcsh, ash to dash or busybox, sh to anything. */
 
-        if (strstr (mc_global.tty.shell, "/zsh") || getenv ("ZSH_VERSION"))
+        if (strstr (mc_global.tty.shell, "/zsh") || strstr (mc_global.tty.shell_realpath, "/zsh") || getenv ("ZSH_VERSION"))
+            /* Also detects ksh symlinked to zsh */
             subshell_type = ZSH;
-        else if (strstr (mc_global.tty.shell, "/tcsh"))
-            subshell_type = TCSH;
-        else if (strstr (mc_global.tty.shell, "/csh"))
+        else if (strstr (mc_global.tty.shell, "/tcsh") || strstr (mc_global.tty.shell_realpath, "/tcsh"))
+            /* Also detects csh symlinked to tcsh */
             subshell_type = TCSH;
+        else if (strstr (mc_global.tty.shell, "/fish") || strstr (mc_global.tty.shell_realpath, "/fish"))
+            subshell_type = FISH;
+        else if (strstr (mc_global.tty.shell, "/dash") || strstr (mc_global.tty.shell_realpath, "/dash"))
+            /* Debian ash (also found if symlinked to by ash/sh) */
+            subshell_type = DASH;
+        else if (strstr (mc_global.tty.shell_realpath, "/busybox"))
+        {
+            /* If shell is symlinked to busybox, assume it is an ash, even though theoretically
+             * it could also be a hush (a mini shell for non-MMU systems deactivated by default).
+             * For simplicity's sake we assume that busybox always contains an ash, not a hush.
+             * On embedded platforms or on server systems, /bin/sh often points to busybox.
+             * Sometimes even bash is symlinked to busybox (CONFIG_FEATURE_BASH_IS_ASH option),
+             * so we need to check busybox symlinks *before* checking for the name "bash"
+             * in order to avoid that case. */
+            subshell_type = ASH_BUSYBOX;
+        }
         else if (strstr (mc_global.tty.shell, "/bash") || getenv ("BASH"))
+            /* If bash is not symlinked to busybox, it is safe to assume it is a real bash */
             subshell_type = BASH;
-        else if (strstr (mc_global.tty.shell, "/fish"))
-            subshell_type = FISH;
         else
         {
             mc_global.tty.use_subshell = FALSE;
@@ -844,7 +879,7 @@
                 return;
             }
         }
-        else /* subshell_type is BASH or ZSH */ if (pipe (subshell_pipe))
+        else /* subshell_type is BASH, ASH_BUSYBOX, DASH or ZSH */ if (pipe (subshell_pipe))
         {
             perror (__FILE__ ": couldn't create pipe");
             mc_global.tty.use_subshell = FALSE;
@@ -882,6 +917,31 @@
                     subshell_pipe[WRITE]);
         break;
 
+    case ASH_BUSYBOX:
+        g_snprintf (precmd, sizeof (precmd),
+                    "precmd() { pwd>&%d; kill -STOP $$; }; "
+                    "PRECMD=precmd; "
+                    "PS1='$(eval $PRECMD)\\u@\\h:\\w\\$ '\n",
+                    subshell_pipe[WRITE]);
+        break;
+
+    case DASH:
+        g_snprintf (precmd, sizeof (precmd),
+            "precmd() { "
+                "if [ ! \"${PWD##$HOME}\" ]; then "
+                    "MC_PWD=\"~\"; "
+                "else "
+                    "[ \"${PWD##$HOME/}\" = \"$PWD\" ] && MC_PWD=\"$PWD\" || MC_PWD=\"~/${PWD##$HOME/}\"; "
+                "fi; "
+                "echo \"$USER@$(hostname -s):$MC_PWD\"; "
+                "pwd>&%d; "
+                "kill -STOP $$; "
+            "}; "
+            "PRECMD=precmd; "
+            "PS1='$($PRECMD)$ '\n",
+            subshell_pipe[WRITE]);
+         break;
+
     case ZSH:
         g_snprintf (precmd, sizeof (precmd),
                     " _mc_precmd(){ pwd>&%d;kill -STOP $$ }; precmd_functions+=(_mc_precmd)\n",
@@ -1106,6 +1166,13 @@
         quote_cmd_start = "(printf \"%b\" '";
         quote_cmd_end = "')";
     }
+    /* TODO: When BusyBox printf is fixed, get rid of this "else if", see
+       http://lists.busybox.net/pipermail/busybox/2012-March/077460.html */
+    else if (subshell_type == ASH_BUSYBOX)
+    {
+        quote_cmd_start = "\"`echo -en '";
+        quote_cmd_end = "'`\"";
+    }
     else
     {
         quote_cmd_start = "\"`printf \"%b\" '";
